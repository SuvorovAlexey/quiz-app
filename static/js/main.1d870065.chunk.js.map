{"version":3,"sources":["components/Navigation/MenuToggle/MenuToggle.js","components/UI/Backdrop/Backdrop.js","components/Navigation/Drawer/Drawer.js","hoc/Layout/Layout.js","components/ActiveQuiz/AnswersList/AnswerItem/AnswerItem.js","components/ActiveQuiz/AnswersList/AnswersList.js","components/ActiveQuiz/ActiveQuiz.js","components/UI/Button/Button.js","components/FinishedQuiz/FinishedQuiz.js","containers/Quiz/Quiz.js","containers/Quiz/Quiz2.js","containers/Quiz/Quiz3.js","containers/QuizList/QuizList.js","App.js","serviceWorker.js","index.js"],"names":["MenuToggle","props","cls","isOpen","push","className","join","onClick","onToggle","Backdrop","links","to","label","exact","Drawer","clickHandler","onClose","renderLinks","map","link","index","key","activeClassName","this","Fragment","Component","Layout","state","menu","toggleMenuHandler","setState","menuCloseHandler","children","AnswerItem","liClasses","answerState","onAnswerClick","answer","id","text","AnswersList","answers","ActiveQuiz","answerNumber","question","quizLenght","Button","type","disabled","FinishedQuiz","successCount","Object","keys","results","reduce","total","console","log","quiz","quizItem","length","onRetry","Quiz","isFinished","activeQuestion","rightAnswerId","onAnswerClickHandler","answerId","timer","window","setTimeout","isQuizFinished","clearTimeout","onRetryHandler","Quiz2","Quiz3","listlinks","1","2","3","QuizList","renderQuizes","App","path","component","Boolean","location","hostname","match","application","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1d870065.chunk.js","sourcesContent":["import React from 'react'\r\nimport './MenuToggle.css'\r\n\r\nconst MenuToggle = (props) => {\r\n    const cls = [\r\n        'menu-toggle',\r\n        'fa'\r\n    ]\r\n\r\n    if(props.isOpen) {\r\n        cls.push('fa-times')\r\n        cls.push('open')\r\n    }\r\n    else {\r\n        cls.push('fa-bars')\r\n    }\r\n        \r\n\r\n\r\n    return(\r\n        <i \r\n            className = {cls.join(' ')}\r\n            onClick = {props.onToggle}\r\n        />\r\n    )\r\n}\r\n\r\nexport default MenuToggle","import React from 'react'\r\nimport './Backdrop.css'\r\n\r\nconst Backdrop = (props)=> {\r\n    return(\r\n        <div className='backdrop' onClick={props.onClick}> </div>\r\n    )\r\n}\r\n\r\nexport default Backdrop","import React, {Component} from 'react'\r\nimport {NavLink} from 'react-router-dom'\r\nimport './Drawer.modules.css'\r\nimport Backdrop from '../../UI/Backdrop/Backdrop'\r\n\r\n\r\nconst links = [\r\n    {to: '/', label: 'Перейти к списку тестов', exact: true},\r\n]\r\n\r\n\r\n\r\nclass Drawer extends Component {\r\n\r\n    clickHandler = () => {\r\n        this.props.onClose()\r\n    }\r\n\r\n    renderLinks = () => {\r\n        return links.map( (link, index)=> {\r\n            return (\r\n                <li key={index} className='li'>\r\n                     <NavLink \r\n                        activeClassName= {'a'}\r\n                        to = {link.to}\r\n                        exact = {link.exact}\r\n                        onClick = {this.clickHandler}\r\n                     > \r\n                        {link.label}\r\n                     </NavLink> \r\n                </li>\r\n            )\r\n        } )\r\n    }\r\n\r\n    render(props) {\r\n\r\n        const cls = [\r\n            'drawer'\r\n        ]\r\n\r\n        if(!this.props.isOpen){\r\n            cls.push('close')\r\n        }\r\n\r\n        return(\r\n            <React.Fragment>\r\n                <nav className={cls.join(' ')}>\r\n                    <ul className='ul'>\r\n                        {this.renderLinks()}\r\n                    </ul>\r\n                </nav>\r\n                { this.props.isOpen ? <Backdrop onClick = {this.props.onClose} /> : null }\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Drawer","import React, {Component} from 'react'\r\nimport './Layout.css'\r\nimport MenuToggle from '../../components/Navigation/MenuToggle/MenuToggle'\r\nimport Drawer from '../../components/Navigation/Drawer/Drawer'\r\n\r\nclass Layout extends Component {\r\n\r\n    state = {\r\n        menu: false\r\n    }\r\n\r\n    toggleMenuHandler = () => {\r\n        this.setState({\r\n            menu: !this.state.menu\r\n        })\r\n    }\r\n\r\n    menuCloseHandler = () => {\r\n        this.setState({\r\n            menu: false\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='layout'> \r\n\r\n                <Drawer \r\n                    isOpen = {this.state.menu}\r\n                    onClose = {this.menuCloseHandler}\r\n                />\r\n\r\n                <MenuToggle \r\n                    onToggle = {this.toggleMenuHandler}\r\n                    isOpen = {this.state.menu}\r\n                />\r\n\r\n                <main className=\"layout-main\">\r\n                    {this.props.children}\r\n                </main>\r\n            </div> \r\n        )\r\n    }\r\n}\r\n\r\nexport default Layout","import React from 'react'\r\nimport './AnswerItem.css'\r\n\r\nconst AnswerItem = (props) => {\r\n\r\n    const liClasses = ['answeritem-li']\r\n\r\n    if(props.answerState === 'success'){\r\n        liClasses.push('success')\r\n    }\r\n    if(props.answerState === 'error'){\r\n        liClasses.push('error')\r\n    }\r\n\r\n    \r\n\r\n    return(\r\n        <li \r\n            className={liClasses.join(' ')}\r\n            onClick={ () => props.onAnswerClick(props.answer.id)} \r\n        >\r\n            {props.answer.text}\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default AnswerItem","import React from 'react'\r\nimport './AnswersList.css'\r\nimport AnswerItem from './AnswerItem/AnswerItem'\r\n\r\nconst AnswersList = (props) => {\r\n\r\n    return(\r\n        <ul className='answer-list'>\r\n            {props.answers.map((answer, index) => { //answer id это номер вопроса\r\n                return(\r\n                    <AnswerItem \r\n                        key={index}\r\n                        answer={answer}\r\n                        onAnswerClick={props.onAnswerClick}\r\n                        answerState={props.answerState ? props.answerState[answer.id] : null}\r\n                    />\r\n                )\r\n            })}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default AnswersList","import React from 'react'\r\nimport './ActiveQuiz.css'\r\nimport AnswersList from './AnswersList/AnswersList'\r\n\r\nconst ActiveQuiz = (props) => {\r\n    return(\r\n        <div className='active-quiz'>\r\n\r\n            <p className='question'> \r\n                <span><b> {props.answerNumber}. &nbsp;</b>{props.question}</span>  \r\n                <span> {props.answerNumber} / {props.quizLenght} </span>\r\n            </p>\r\n            \r\n\r\n            <AnswersList \r\n                answers = {props.answers}\r\n                onAnswerClick={props.onAnswerClick}\r\n                answerState={props.answerState}\r\n            />\r\n\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default ActiveQuiz","import React from 'react'\r\nimport './Button.css'\r\n\r\nconst Button = (props) => {\r\n    const cls = [\r\n        'button',\r\n        props.type\r\n    ]\r\n\r\n\r\n    return(\r\n        <div\r\n            className = {cls.join(' ')}\r\n            onClick = {props.onClick}\r\n            disabled = {props.disabled}\r\n        >\r\n            {props.children}\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Button","import React from 'react'\r\nimport './FinishedQuiz.css'\r\nimport Button from '../UI/Button/Button'\r\nimport {Link} from 'react-router-dom'\r\n\r\nconst FinishedQuiz = (props) => {\r\n\r\n    const successCount = Object.keys(props.results).reduce((total, key)=> {       //Object.keys - превращает объект в массив ключей этого объекта. reduce проходится по массиву(по его ключам)\r\n        console.log(props.results[key]);\r\n        \r\n        if(props.results[key] === 'success') {\r\n            console.log(total);   \r\n            total++ \r\n        }\r\n        return total\r\n    }, 0) // 0 - начальное значение\r\n\r\n\r\n\r\n    return (\r\n        <div className='finish-quiz'>\r\n            <ul className='finish-quiz-ul'>\r\n\r\n                {props.quiz.map((quizItem, index)=>{\r\n                    const cls = [\r\n                        'fa',\r\n                        props.results[quizItem.id] === 'error' ? 'fa-times finish-error' : 'fa-check finish-complete'\r\n                    ]\r\n\r\n                    return(\r\n                        <li\r\n                            key={index}\r\n                        >\r\n                            <b>{index + 1}.</b> &nbsp;\r\n                            {quizItem.question} &nbsp;\r\n                            <i className={cls.join('  ')}/>\r\n                        </li>\r\n                    )\r\n                })}\r\n\r\n\r\n\r\n            </ul>\r\n            <p>Правильно {successCount} из {props.quiz.length}  вопросов</p>\r\n            \r\n            <div>\r\n                <Button onClick={props.onRetry} type='primary'> Повторить </Button>\r\n                <Link to='/'>\r\n                    <Button type='success'> Перейти в список тестов </Button>\r\n                </Link>\r\n                \r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default FinishedQuiz","import React, {Component} from 'react'\r\nimport './Quiz.css'\r\nimport ActiveQuiz from '../../components/ActiveQuiz/ActiveQuiz'\r\nimport FinishedQuiz from '../../components/FinishedQuiz/FinishedQuiz'\r\n\r\nclass Quiz extends Component {\r\n    state= {\r\n        isFinished: false,\r\n        activeQuestion: 0,\r\n        results: {}, //результаты ответа на вопросы.  { [id]: 'success' 'error' } ключ по id\r\n        answerState: null,  //текущий клик пользователя.  { [id]: 'success' 'error' } по id смотрим правильно ли ответили на вопрос\r\n        quiz: [\r\n            {   \r\n                id: 1,\r\n                question: 'Имя царя, отменившего крепостное право',\r\n                answers: [\r\n                   {text: 'Павел I', id: 1},\r\n                   {text: 'Александр II', id: 2},\r\n                   {text: 'Петр I', id: 3},\r\n                   {text: 'Александр III', id: 4},\r\n                ],\r\n                rightAnswerId: 2\r\n            },\r\n            {   \r\n                id: 2,\r\n                question: 'В каком году основали Санкт-Петербург?',\r\n                answers: [\r\n                   {text: '1650', id: 1},\r\n                   {text: '1701', id: 2},\r\n                   {text: '1703', id: 3},\r\n                   {text: '1770', id: 4},\r\n                ],\r\n                rightAnswerId: 3\r\n            },\r\n            {   \r\n                id: 3,\r\n                question: 'Год открытия Америки',\r\n                answers: [\r\n                   {text: '1547', id: 1},\r\n                   {text: '1623', id: 2},\r\n                   {text: '1512', id: 3},\r\n                   {text: '1492', id: 4},\r\n                ],\r\n                rightAnswerId: 4\r\n            }\r\n        ]\r\n    }\r\n\r\n    onAnswerClickHandler = (answerId) => {\r\n\r\n        if(this.state.answerState) {        //fix чтоб нажать на выигрышн кнопку можно нажать всего 1 раз в каждом вопросе\r\n            const key = Object.keys(this.state.answerState)[0]  //забираем наш айдишник с пом Object.keys. 0-й элемент тк там всегда будет лежать только 1 элемент\r\n            \r\n            if(this.state.answerState[key] === 'success'){\r\n                return\r\n            }\r\n        }\r\n\r\n        const question = this.state.quiz[this.state.activeQuestion]\r\n        const results = this.state.results\r\n\r\n        if(question.rightAnswerId === answerId) { //если правильно ответили на вопрос\r\n            if(!results[question.id]){\r\n                results[question.id] = 'success'\r\n            }\r\n\r\n            this.setState({\r\n                answerState: { [answerId]: 'success' },\r\n                results: results\r\n            })\r\n\r\n            const timer = window.setTimeout( () => {\r\n                if(this.isQuizFinished()) {\r\n                    this.setState({\r\n                        isFinished: true\r\n                    }) \r\n                }\r\n                else {\r\n                    this.setState({\r\n                        activeQuestion: this.state.activeQuestion + 1,\r\n                        answerState: null\r\n                    }) \r\n                }\r\n                window.clearTimeout(timer) \r\n            },800)\r\n   \r\n        }\r\n        else {\r\n            results[question.id] = 'error'\r\n            this.setState({\r\n                answerState: { [answerId]: 'error' },\r\n                results: results\r\n            })\r\n        }  \r\n    }\r\n\r\n    isQuizFinished = () => {\r\n        return this.state.activeQuestion + 1 === this.state.quiz.length\r\n    }\r\n\r\n    onRetryHandler = () => {\r\n        this.setState({\r\n            activeQuestion: 0,\r\n            answerState: null,\r\n            isFinished: false,\r\n            results: {}\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return( \r\n            <div className='quiz'>  \r\n                \r\n                <div className='quiz-wrapper'>\r\n                    <h1 className='quiz-h1'>Ответьте на все вопросы</h1>\r\n\r\n                    {\r\n                        this.state.isFinished \r\n                    ?   <FinishedQuiz\r\n                            results={this.state.results}\r\n                            quiz={this.state.quiz}\r\n                            onRetry = {this.onRetryHandler}\r\n                        /> \r\n                    :   <ActiveQuiz \r\n                        question={this.state.quiz[this.state.activeQuestion].question} //передаем сам вопрос\r\n                        answers={this.state.quiz[this.state.activeQuestion].answers} //передаем массив вариантов ответа\r\n                        onAnswerClick={this.onAnswerClickHandler} //передаем функцию нажатия на вариант ответа\r\n                        quizLenght={this.state.quiz.length} //передаем длину массива вопросов\r\n                        answerNumber={this.state.activeQuestion + 1} //передаем текущий нормер вопроса\r\n                        answerState={this.state.answerState}\r\n                    />\r\n                    }\r\n                    \r\n\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Quiz","import React, {Component} from 'react'\r\nimport './Quiz.css'\r\nimport ActiveQuiz from '../../components/ActiveQuiz/ActiveQuiz'\r\nimport FinishedQuiz from '../../components/FinishedQuiz/FinishedQuiz'\r\n\r\nclass Quiz2 extends Component {\r\n    state= {\r\n        isFinished: false,\r\n        activeQuestion: 0,\r\n        results: {}, //результаты ответа на вопросы.  { [id]: 'success' 'error' } ключ по id\r\n        answerState: null,  //текущий клик пользователя.  { [id]: 'success' 'error' } по id смотрим правильно ли ответили на вопрос\r\n        quiz: [\r\n            {   \r\n                id: 1,\r\n                question: 'Кто написал \"Мертвые души ?\"',\r\n                answers: [\r\n                   {text: 'Грибоедов', id: 1},\r\n                   {text: 'Пастернак', id: 2},\r\n                   {text: 'Гоголь', id: 3},\r\n                   {text: 'Толстой', id: 4},\r\n                ],\r\n                rightAnswerId: 3\r\n            },\r\n            {   \r\n                id: 2,\r\n                question: 'Кому посвящен памятник в поэме \"Медный всадник\" ?',\r\n                answers: [\r\n                   {text: 'Александр Невский', id: 1},\r\n                   {text: 'Петр I', id: 2},\r\n                   {text: 'Иван Грозный', id: 3},\r\n                   {text: 'Александр I', id: 4},\r\n                ],\r\n                rightAnswerId: 2\r\n            },\r\n            {   \r\n                id: 3,\r\n                question: 'Кем по профессии был А.П.Чехов ?',\r\n                answers: [\r\n                   {text: 'Учитель', id: 1},\r\n                   {text: 'Бакалейщик', id: 2},\r\n                   {text: 'Юрист', id: 3},\r\n                   {text: 'Врач', id: 4},\r\n                ],\r\n                rightAnswerId: 4\r\n            }\r\n        ]\r\n    }\r\n\r\n    onAnswerClickHandler = (answerId) => {\r\n\r\n        if(this.state.answerState) {        //fix чтоб нажать на выигрышн кнопку можно нажать всего 1 раз в каждом вопросе\r\n            const key = Object.keys(this.state.answerState)[0]  //забираем наш айдишник с пом Object.keys. 0-й элемент тк там всегда будет лежать только 1 элемент\r\n            \r\n            if(this.state.answerState[key] === 'success'){\r\n                return\r\n            }\r\n        }\r\n\r\n        const question = this.state.quiz[this.state.activeQuestion]\r\n        const results = this.state.results\r\n\r\n        if(question.rightAnswerId === answerId) { //если правильно ответили на вопрос\r\n            if(!results[question.id]){\r\n                results[question.id] = 'success'\r\n            }\r\n\r\n            this.setState({\r\n                answerState: { [answerId]: 'success' },\r\n                results: results\r\n            })\r\n\r\n            const timer = window.setTimeout( () => {\r\n                if(this.isQuizFinished()) {\r\n                    this.setState({\r\n                        isFinished: true\r\n                    }) \r\n                }\r\n                else {\r\n                    this.setState({\r\n                        activeQuestion: this.state.activeQuestion + 1,\r\n                        answerState: null\r\n                    }) \r\n                }\r\n                window.clearTimeout(timer) \r\n            },800)\r\n   \r\n        }\r\n        else {\r\n            results[question.id] = 'error'\r\n            this.setState({\r\n                answerState: { [answerId]: 'error' },\r\n                results: results\r\n            })\r\n        }  \r\n    }\r\n\r\n    isQuizFinished = () => {\r\n        return this.state.activeQuestion + 1 === this.state.quiz.length\r\n    }\r\n\r\n    onRetryHandler = () => {\r\n        this.setState({\r\n            activeQuestion: 0,\r\n            answerState: null,\r\n            isFinished: false,\r\n            results: {}\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return( \r\n            <div className='quiz'>  \r\n                \r\n                <div className='quiz-wrapper'>\r\n                    <h1 className='quiz-h1'>Ответьте на все вопросы</h1>\r\n\r\n                    {\r\n                        this.state.isFinished \r\n                    ?   <FinishedQuiz\r\n                            results={this.state.results}\r\n                            quiz={this.state.quiz}\r\n                            onRetry = {this.onRetryHandler}\r\n                        /> \r\n                    :   <ActiveQuiz \r\n                        question={this.state.quiz[this.state.activeQuestion].question} //передаем сам вопрос\r\n                        answers={this.state.quiz[this.state.activeQuestion].answers} //передаем массив вариантов ответа\r\n                        onAnswerClick={this.onAnswerClickHandler} //передаем функцию нажатия на вариант ответа\r\n                        quizLenght={this.state.quiz.length} //передаем длину массива вопросов\r\n                        answerNumber={this.state.activeQuestion + 1} //передаем текущий нормер вопроса\r\n                        answerState={this.state.answerState}\r\n                    />\r\n                    }\r\n                    \r\n\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Quiz2","import React, {Component} from 'react'\r\nimport './Quiz.css'\r\nimport ActiveQuiz from '../../components/ActiveQuiz/ActiveQuiz'\r\nimport FinishedQuiz from '../../components/FinishedQuiz/FinishedQuiz'\r\n\r\nclass Quiz3 extends Component {\r\n    state= {\r\n        isFinished: false,\r\n        activeQuestion: 0,\r\n        results: {}, //результаты ответа на вопросы.  { [id]: 'success' 'error' } ключ по id\r\n        answerState: null,  //текущий клик пользователя.  { [id]: 'success' 'error' } по id смотрим правильно ли ответили на вопрос\r\n        quiz: [\r\n            {   \r\n                id: 1,\r\n                question: 'Какая самая высокая гора в мире ?',\r\n                answers: [\r\n                   {text: 'Чогори', id: 1},\r\n                   {text: 'Эльбрус', id: 2},\r\n                   {text: 'Эверест', id: 3},\r\n                   {text: 'Броуд-Пик', id: 4},\r\n                ],\r\n                rightAnswerId: 3\r\n            },\r\n            {   \r\n                id: 2,\r\n                question: 'Какое государства не имеет выхода к морю ?',\r\n                answers: [\r\n                   {text: 'Чехия', id: 1},\r\n                   {text: 'Дания', id: 2},\r\n                   {text: 'Алжир', id: 3},\r\n                   {text: 'Эквадор', id: 4},\r\n                ],\r\n                rightAnswerId: 1\r\n            },\r\n            {   \r\n                id: 3,\r\n                question: 'Со сколькими странами граничит Россия ?',\r\n                answers: [\r\n                   {text: '12', id: 1},\r\n                   {text: '14', id: 2},\r\n                   {text: '17', id: 3},\r\n                   {text: '19', id: 4},\r\n                ],\r\n                rightAnswerId: 2\r\n            }\r\n        ]\r\n    }\r\n\r\n    onAnswerClickHandler = (answerId) => {\r\n\r\n        if(this.state.answerState) {        //fix чтоб нажать на выигрышн кнопку можно нажать всего 1 раз в каждом вопросе\r\n            const key = Object.keys(this.state.answerState)[0]  //забираем наш айдишник с пом Object.keys. 0-й элемент тк там всегда будет лежать только 1 элемент\r\n            \r\n            if(this.state.answerState[key] === 'success'){\r\n                return\r\n            }\r\n        }\r\n\r\n        const question = this.state.quiz[this.state.activeQuestion]\r\n        const results = this.state.results\r\n\r\n        if(question.rightAnswerId === answerId) { //если правильно ответили на вопрос\r\n            if(!results[question.id]){\r\n                results[question.id] = 'success'\r\n            }\r\n\r\n            this.setState({\r\n                answerState: { [answerId]: 'success' },\r\n                results: results\r\n            })\r\n\r\n            const timer = window.setTimeout( () => {\r\n                if(this.isQuizFinished()) {\r\n                    this.setState({\r\n                        isFinished: true\r\n                    }) \r\n                }\r\n                else {\r\n                    this.setState({\r\n                        activeQuestion: this.state.activeQuestion + 1,\r\n                        answerState: null\r\n                    }) \r\n                }\r\n                window.clearTimeout(timer) \r\n            },800)\r\n   \r\n        }\r\n        else {\r\n            results[question.id] = 'error'\r\n            this.setState({\r\n                answerState: { [answerId]: 'error' },\r\n                results: results\r\n            })\r\n        }  \r\n    }\r\n\r\n    isQuizFinished = () => {\r\n        return this.state.activeQuestion + 1 === this.state.quiz.length\r\n    }\r\n\r\n    onRetryHandler = () => {\r\n        this.setState({\r\n            activeQuestion: 0,\r\n            answerState: null,\r\n            isFinished: false,\r\n            results: {}\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return( \r\n            <div className='quiz'>  \r\n                \r\n                <div className='quiz-wrapper'>\r\n                    <h1 className='quiz-h1'>Ответьте на все вопросы</h1>\r\n\r\n                    {\r\n                        this.state.isFinished \r\n                    ?   <FinishedQuiz\r\n                            results={this.state.results}\r\n                            quiz={this.state.quiz}\r\n                            onRetry = {this.onRetryHandler}\r\n                        /> \r\n                    :   <ActiveQuiz \r\n                        question={this.state.quiz[this.state.activeQuestion].question} //передаем сам вопрос\r\n                        answers={this.state.quiz[this.state.activeQuestion].answers} //передаем массив вариантов ответа\r\n                        onAnswerClick={this.onAnswerClickHandler} //передаем функцию нажатия на вариант ответа\r\n                        quizLenght={this.state.quiz.length} //передаем длину массива вопросов\r\n                        answerNumber={this.state.activeQuestion + 1} //передаем текущий нормер вопроса\r\n                        answerState={this.state.answerState}\r\n                    />\r\n                    }\r\n                    \r\n\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Quiz3","import React,{Component} from 'react'\r\nimport {NavLink} from 'react-router-dom'\r\nimport './QuizList.modules.css'\r\n\r\nconst listlinks = [\r\n    {1: 'История'},\r\n    {2: 'Литература'},\r\n    {3: 'География'}\r\n]\r\n\r\nclass QuizList extends Component {\r\n\r\n    renderQuizes = ()=> {\r\n        return listlinks.map((quiz, index) => {\r\n            return(\r\n                <li\r\n                    key = {index}\r\n                    className = 'li'\r\n                >\r\n                    <NavLink \r\n                        to={'/quiz/' + (index+1)}\r\n                    > \r\n                        Тест № {index+1} : {quiz[index+1]}\r\n                    </NavLink>\r\n                </li>\r\n            )\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className = 'QuizList'>\r\n                <div>\r\n                    <h1 className='h1'>Список тестов</h1>\r\n\r\n                    <ul className='ul'>\r\n                        {this.renderQuizes()}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default QuizList","import React from 'react';\nimport Layout from './hoc/Layout/Layout'\nimport Quiz from './containers/Quiz/Quiz'\nimport Quiz2 from './containers/Quiz/Quiz2'\nimport Quiz3 from './containers/Quiz/Quiz3'\nimport {Route, Switch} from 'react-router-dom'\nimport QuizList from './containers/QuizList/QuizList'\n\nfunction App() {\n  return (\n      <Layout>\n        <Switch>\n          <Route path='/quiz/1' component={Quiz}></Route>\n          <Route path='/quiz/2' component={Quiz2}></Route>\n          <Route path='/quiz/3' component={Quiz3}></Route>\n          <Route path='/' component={QuizList}></Route> \n        </Switch>\n        \n      </Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nconst application = (\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n)\n\nReactDOM.render(\n  application,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}